{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/getCartItems`);\n\n      if (res.status === 200) {\n        const {\n          cartItems\n        } = res.data;\n        console.log({\n          getCartItems: cartItems\n        });\n\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: {\n              cartItems\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async dispatch => {\n    const {\n      cart: {\n        cartItems\n      },\n      auth\n    } = store.getState(); //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n    // const qty = cartItems[product._id]\n    //   ? parseInt(cartItems[product._id].qty + newQty)\n    //   : 1;\n    // cartItems[product._id] = {\n    //   ...product,\n    //   qty,\n    // };\n\n    if (auth.authenticate) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [{\n          product: product._id,\n          quantity: qty\n        }]\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: {\n        cartItems\n      }\n    });\n  };\n}; // export const removeCartItem = (payload) => {\n//   return async (dispatch) => {\n//     try {\n//       dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n//       const res = await axios.post(`/user/cart/removeItem`, { payload });\n//       if (res.status === 202) {\n//         dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n//         dispatch(getCartItems());\n//       } else {\n//         const { error } = res.data;\n//         dispatch({\n//           type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n//           payload: { error },\n//         });\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n// };\n// export const updateCart = () => {\n//   return async (dispatch) => {\n//     const { auth } = store.getState();\n//     let cartItems = localStorage.getItem(\"cart\")\n//       ? JSON.parse(localStorage.getItem(\"cart\"))\n//       : null;\n//     console.log(\"upppppppppp\");\n//     if (auth.authenticate) {\n//       localStorage.removeItem(\"cart\");\n//       //dispatch(getCartItems());\n//       if (cartItems) {\n//         const payload = {\n//           cartItems: Object.keys(cartItems).map((key, index) => {\n//             return {\n//               quantity: cartItems[key].qty,\n//               product: cartItems[key]._id,\n//             };\n//           }),\n//         };\n//         if (Object.keys(cartItems).length > 0) {\n//           const res = await axios.post(`/user/cart/addtocart`, payload);\n//           if (res.status === 201) {\n//             dispatch(getCartItems());\n//           }\n//         }\n//       } else {\n//         dispatch(getCartItems());\n//       }\n//     } else {\n//       if (cartItems) {\n//         dispatch({\n//           type: cartConstants.ADD_TO_CART_SUCCESS,\n//           payload: { cartItems },\n//         });\n//       }\n//     }\n//   };\n// };\n\nexport { getCartItems };","map":{"version":3,"sources":["C:/Users/abc/Desktop/SHOPISTHAN_PVT_LTD/Development/shopisthan-frontend/src/actions/cart.action.js"],"names":["axios","cartConstants","store","getCartItems","dispatch","type","ADD_TO_CART_REQUEST","res","post","status","cartItems","data","console","log","ADD_TO_CART_SUCCESS","payload","error","addToCart","product","newQty","cart","auth","getState","authenticate","_id","quantity","qty","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import axios from \"../helpers/axios\";\r\nimport { cartConstants } from \"./constants\";\r\nimport store from \"../store\";\r\n\r\nconst getCartItems = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\r\n      const res = await axios.post(`/user/getCartItems`);\r\n      if (res.status === 200) {\r\n        const { cartItems } = res.data;\r\n        console.log({ getCartItems: cartItems });\r\n        if (cartItems) {\r\n          dispatch({\r\n            type: cartConstants.ADD_TO_CART_SUCCESS,\r\n            payload: { cartItems },\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const addToCart = (product, newQty = 1) => {\r\n  return async (dispatch) => {\r\n    const {\r\n      cart: { cartItems },\r\n      auth,\r\n    } = store.getState();\r\n    //console.log('action::products', products);\r\n    //const product = action.payload.product;\r\n    //const products = state.products;\r\n    // const qty = cartItems[product._id]\r\n    //   ? parseInt(cartItems[product._id].qty + newQty)\r\n    //   : 1;\r\n    // cartItems[product._id] = {\r\n    //   ...product,\r\n    //   qty,\r\n    // };\r\n\r\n    if (auth.authenticate) {\r\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\r\n      const payload = {\r\n        // cartItems: Object.keys(cartItems).map((key, index) => {\r\n        //     return {\r\n        //         quantity: cartItems[key].qty,\r\n        //         product: cartItems[key]._id\r\n        //     }\r\n        // })\r\n        cartItems: [\r\n          {\r\n            product: product._id,\r\n            quantity: qty,\r\n          },\r\n        ],\r\n      };\r\n      console.log(payload);\r\n      const res = await axios.post(`/user/cart/addtocart`, payload);\r\n      console.log(res);\r\n      if (res.status === 201) {\r\n        dispatch(getCartItems());\r\n      }\r\n    } else {\r\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\r\n    }\r\n\r\n    console.log(\"addToCart::\", cartItems);\r\n\r\n    dispatch({\r\n      type: cartConstants.ADD_TO_CART_SUCCESS,\r\n      payload: { cartItems },\r\n    });\r\n  };\r\n};\r\n\r\n// export const removeCartItem = (payload) => {\r\n//   return async (dispatch) => {\r\n//     try {\r\n//       dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\r\n//       const res = await axios.post(`/user/cart/removeItem`, { payload });\r\n//       if (res.status === 202) {\r\n//         dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\r\n//         dispatch(getCartItems());\r\n//       } else {\r\n//         const { error } = res.data;\r\n//         dispatch({\r\n//           type: cartConstants.REMOVE_CART_ITEM_FAILURE,\r\n//           payload: { error },\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   };\r\n// };\r\n\r\n// export const updateCart = () => {\r\n//   return async (dispatch) => {\r\n//     const { auth } = store.getState();\r\n//     let cartItems = localStorage.getItem(\"cart\")\r\n//       ? JSON.parse(localStorage.getItem(\"cart\"))\r\n//       : null;\r\n\r\n//     console.log(\"upppppppppp\");\r\n\r\n//     if (auth.authenticate) {\r\n//       localStorage.removeItem(\"cart\");\r\n//       //dispatch(getCartItems());\r\n//       if (cartItems) {\r\n//         const payload = {\r\n//           cartItems: Object.keys(cartItems).map((key, index) => {\r\n//             return {\r\n//               quantity: cartItems[key].qty,\r\n//               product: cartItems[key]._id,\r\n//             };\r\n//           }),\r\n//         };\r\n//         if (Object.keys(cartItems).length > 0) {\r\n//           const res = await axios.post(`/user/cart/addtocart`, payload);\r\n//           if (res.status === 201) {\r\n//             dispatch(getCartItems());\r\n//           }\r\n//         }\r\n//       } else {\r\n//         dispatch(getCartItems());\r\n//       }\r\n//     } else {\r\n//       if (cartItems) {\r\n//         dispatch({\r\n//           type: cartConstants.ADD_TO_CART_SUCCESS,\r\n//           payload: { cartItems },\r\n//         });\r\n//       }\r\n//     }\r\n//   };\r\n// };\r\n\r\nexport { getCartItems };"]},"metadata":{},"sourceType":"module"}