{"ast":null,"code":"import axiosIntance from \"../helpers/axios\";\nimport axios from \"../helpers/axios\";\nimport { authConstants } from \"./constants\";\nexport const signup = user => {\n  return async dispatch => {\n    let res;\n\n    try {\n      dispatch({\n        type: authConstants.SIGNUP_REQUEST\n      });\n      res = await axios.post(`/signup`, user);\n\n      if (res.status === 201) {\n        dispatch({\n          type: authConstants.SIGNUP_SUCCESS\n        });\n        const {\n          token,\n          user\n        } = res.data;\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        dispatch({\n          type: authConstants.LOGIN_SUCCESS,\n          payload: {\n            token,\n            user\n          }\n        });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: authConstants.SIGNUP_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      const {\n        data\n      } = error.response;\n      dispatch({\n        type: authConstants.SIGNUP_FAILURE,\n        payload: {\n          error: data.error\n        }\n      });\n    }\n  };\n};\nexport const login = user => {\n  console.log(user);\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const res = await axiosIntance.post(`/signin`, { ...user\n    });\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n}; // export const signup = (user) => {\n//   console.log(user);\n//   return async (dispatch) => {\n//     dispatch({ type: authConstants.LOGIN_REQUEST });\n//     const res = await axiosIntance.post(`/admin/signup`, {\n//       ...user\n//     });\n//     if (res.status === 201) {\n//       const { message } = res.data;\n//       dispatch({\n//         type: authConstants.LOGIN_SUCCESS,\n//         payload: {\n//           token,\n//           user\n//         }\n//       });\n//     } else {\n//       if (res.status === 400) {\n//         dispatch({\n//           type: authConstants.LOGIN_FAILURE,\n//           payload: { error: res.data.error }\n//         });\n//       }\n//     }\n//   };\n// };\n\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: \"Failed to login\"\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({\n        type: authConstants.LOGOUT_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/abc/Desktop/Shopistha_web_pro/New folder/Shopisthan-demo/FrontEnd-master/src/actions/auth.action.js"],"names":["axiosIntance","axios","authConstants","signup","user","dispatch","res","type","SIGNUP_REQUEST","post","status","SIGNUP_SUCCESS","token","data","localStorage","setItem","JSON","stringify","LOGIN_SUCCESS","payload","error","SIGNUP_FAILURE","response","login","console","log","LOGIN_REQUEST","LOGIN_FAILURE","isUserLoggedIn","getItem","parse","signout","LOGOUT_REQUEST","clear","LOGOUT_SUCCESS"],"mappings":"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","sourcesContent":["import axiosIntance from \"../helpers/axios\";\r\nimport axios from \"../helpers/axios\";\r\nimport { authConstants } from \"./constants\";\r\n\r\nexport const signup = (user) => {\r\n  return async (dispatch) => {\r\n    let res;\r\n    try {\r\n      dispatch({ type: authConstants.SIGNUP_REQUEST });\r\n      res = await axios.post(`/signup`, user);\r\n      if (res.status === 201) {\r\n        dispatch({ type: authConstants.SIGNUP_SUCCESS });\r\n        const { token, user } = res.data;\r\n        localStorage.setItem(\"token\", token);\r\n        localStorage.setItem(\"user\", JSON.stringify(user));\r\n        dispatch({\r\n          type: authConstants.LOGIN_SUCCESS,\r\n          payload: {\r\n            token,\r\n            user,\r\n          },\r\n        });\r\n      } else {\r\n        const { error } = res.data;\r\n        dispatch({ type: authConstants.SIGNUP_FAILURE, payload: { error } });\r\n      }\r\n    } catch (error) {\r\n      const { data } = error.response;\r\n      dispatch({\r\n        type: authConstants.SIGNUP_FAILURE,\r\n        payload: { error: data.error },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const login = (user) => {\r\n\r\n  console.log(user);\r\n\r\n\r\n  return async (dispatch) => {\r\n    dispatch({ type: authConstants.LOGIN_REQUEST });\r\n    const res = await axiosIntance.post(`/signin`, {\r\n      ...user\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      const { token, user } = res.data;\r\n      localStorage.setItem(\"token\", token);\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n      dispatch({\r\n        type: authConstants.LOGIN_SUCCESS,\r\n        payload: {\r\n          token,\r\n          user\r\n        }\r\n      });\r\n    } else {\r\n      if (res.status === 400) {\r\n        dispatch({\r\n          type: authConstants.LOGIN_FAILURE,\r\n          payload: { error: res.data.error }\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\n\r\n// export const signup = (user) => {\r\n\r\n//   console.log(user);\r\n\r\n\r\n//   return async (dispatch) => {\r\n//     dispatch({ type: authConstants.LOGIN_REQUEST });\r\n//     const res = await axiosIntance.post(`/admin/signup`, {\r\n//       ...user\r\n//     });\r\n\r\n//     if (res.status === 201) {\r\n//       const { message } = res.data;\r\n\r\n//       dispatch({\r\n//         type: authConstants.LOGIN_SUCCESS,\r\n//         payload: {\r\n//           token,\r\n//           user\r\n//         }\r\n//       });\r\n//     } else {\r\n//       if (res.status === 400) {\r\n//         dispatch({\r\n//           type: authConstants.LOGIN_FAILURE,\r\n//           payload: { error: res.data.error }\r\n//         });\r\n//       }\r\n//     }\r\n//   };\r\n// };\r\n\r\n\r\nexport const isUserLoggedIn = () => {\r\n  return async (dispatch) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      dispatch({\r\n        type: authConstants.LOGIN_SUCCESS,\r\n        payload: {\r\n          token,\r\n          user\r\n        }\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: authConstants.LOGIN_FAILURE,\r\n        payload: { error: \"Failed to login\" }\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const signout = () => {\r\n  return async dispatch => {\r\n\r\n    dispatch({ type: authConstants.LOGOUT_REQUEST });\r\n\r\n    const res = await axios.post(`/admin/signout`)\r\n    if (res.status === 200) {\r\n      localStorage.clear();\r\n      dispatch({\r\n        type: authConstants.LOGOUT_SUCCESS\r\n      });\r\n\r\n    } else {\r\n\r\n      dispatch({\r\n        type: authConstants.LOGIN_FAILURE,\r\n        payload: { error: res.data.error }\r\n      });\r\n    }\r\n\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}