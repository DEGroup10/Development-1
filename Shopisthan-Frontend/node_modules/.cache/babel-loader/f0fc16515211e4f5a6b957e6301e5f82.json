{"ast":null,"code":"import axiosIntance from \"../helpers/axios\";\nimport { userContants } from \"./constants\";\n\nexports.userSignup = (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }).exec(async (error, user) => {\n    if (user) return res.status(400).json({\n      message: \"User already registered\"\n    });\n    const {\n      firstName,\n      lastName,\n      email,\n      password\n    } = req.body;\n    const hash_password = await bcrypt.hash(password, 10);\n\n    const _user = new User({\n      firstName,\n      lastName,\n      email,\n      hash_password,\n      username: shortid.generate()\n    });\n\n    _user.save((error, data) => {\n      if (error) {\n        return res.status(400).json({\n          message: \"Something went worng\",\n          error\n        });\n      }\n\n      if (data) {\n        return res.status(201).json({\n          message: \"User created Successfully...!\"\n        });\n      }\n    });\n  });\n}; // export const userSignup = (user) => {\n//   console.log(user);\n//   return async (dispatch) => {\n//     dispatch({ type: userContants.USER_REGISTER_REQUEST });\n//     const res = await axiosIntance.post(`/signup`, {\n//       ...user\n//     });\n//     if (res.status === 201) {\n//       const { message } = res.data;\n//       dispatch({\n//         type: userContants.USER_REGISTER_SUCCESS,\n//         payload: {\n//          message\n//         }\n//       });\n//     } else {\n//       if (res.status === 400) {\n//         dispatch({\n//           type: userContants.USER_REGISTER_FAILURE,\n//           payload: { error: res.data.error }\n//         });\n//       }\n//     }\n//   };\n// };\n// export const signup = (user) => {\n//   return async (dispatch) => {\n//     let res;\n//     try {\n//       dispatch({ type: authConstants.SIGNUP_REQUEST });\n//       res = await axios.post(`/signup`, user);\n//       if (res.status === 201) {\n//         dispatch({ type: authConstants.SIGNUP_SUCCESS });\n//         const { token, user } = res.data;\n//         localStorage.setItem(\"token\", token);\n//         localStorage.setItem(\"user\", JSON.stringify(user));\n//         dispatch({\n//           type: authConstants.LOGIN_SUCCESS,\n//           payload: {\n//             token,\n//             user,\n//           },\n//         });\n//       } else {\n//         const { error } = res.data;\n//         dispatch({ type: authConstants.SIGNUP_FAILURE, payload: { error } });\n//       }\n//     } catch (error) {\n//       // const { data } = error.response;\n//       dispatch({\n//         type: authConstants.SIGNUP_FAILURE,\n//         payload: { error },\n//       });\n//     }\n//   };\n// };","map":{"version":3,"sources":["C:/Users/abc/Desktop/Shopistha_web_pro/New folder/Shopisthan-demo/FrontEnd-master/src/actions/user.action.js"],"names":["axiosIntance","userContants","exports","userSignup","req","res","User","findOne","email","body","exec","error","user","status","json","message","firstName","lastName","password","hash_password","bcrypt","hash","_user","username","shortid","generate","save","data"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,kBAAzB;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEAC,OAAO,CAACC,UAAR,GAAqB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjCC,EAAAA,IAAI,CAACC,OAAL,CAAa;AAAEC,IAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASD;AAAlB,GAAb,EAAwCE,IAAxC,CAA6C,OAAOC,KAAP,EAAcC,IAAd,KAAuB;AAClE,QAAIA,IAAJ,EACE,OAAOP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,OAAO,EAAE;AADiB,KAArB,CAAP;AAIF,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,QAAb;AAAuBT,MAAAA,KAAvB;AAA8BU,MAAAA;AAA9B,QAA2Cd,GAAG,CAACK,IAArD;AACA,UAAMU,aAAa,GAAG,MAAMC,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsB,EAAtB,CAA5B;;AACA,UAAMI,KAAK,GAAG,IAAIhB,IAAJ,CAAS;AACrBU,MAAAA,SADqB;AAErBC,MAAAA,QAFqB;AAGrBT,MAAAA,KAHqB;AAIrBW,MAAAA,aAJqB;AAKrBI,MAAAA,QAAQ,EAAEC,OAAO,CAACC,QAAR;AALW,KAAT,CAAd;;AASAH,IAAAA,KAAK,CAACI,IAAN,CAAW,CAACf,KAAD,EAAQgB,IAAR,KAAiB;AAC1B,UAAIhB,KAAJ,EAAW;AACT,eAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,UAAAA,OAAO,EAAE,sBADiB;AAE1BJ,UAAAA;AAF0B,SAArB,CAAP;AAID;;AACD,UAAIgB,IAAJ,EAAU;AACR,eAAOtB,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,UAAAA,OAAO,EAAE;AADiB,SAArB,CAAP;AAGD;AACF,KAZD;AAaD,GA9BD;AA+BD,CAhCD,C,CAoCA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axiosIntance from \"../helpers/axios\";\r\nimport { userContants } from \"./constants\";\r\n\r\nexports.userSignup = (req, res) => {\r\n  User.findOne({ email: req.body.email }).exec(async (error, user) => {\r\n    if (user)\r\n      return res.status(400).json({\r\n        message: \"User already registered\",\r\n      });\r\n\r\n    const { firstName, lastName, email, password } = req.body;\r\n    const hash_password = await bcrypt.hash(password, 10);\r\n    const _user = new User({\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      hash_password,\r\n      username: shortid.generate(), \r\n    });\r\n\r\n\r\n    _user.save((error, data) => {\r\n      if (error) {\r\n        return res.status(400).json({\r\n          message: \"Something went worng\",\r\n          error,\r\n        });\r\n      }\r\n      if (data) {\r\n        return res.status(201).json({\r\n          message: \"User created Successfully...!\",\r\n        });\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n\r\n\r\n// export const userSignup = (user) => {\r\n\r\n//   console.log(user);\r\n\r\n\r\n//   return async (dispatch) => {\r\n//     dispatch({ type: userContants.USER_REGISTER_REQUEST });\r\n//     const res = await axiosIntance.post(`/signup`, {\r\n//       ...user\r\n//     });\r\n\r\n//     if (res.status === 201) {\r\n//       const { message } = res.data;\r\n      \r\n//       dispatch({\r\n//         type: userContants.USER_REGISTER_SUCCESS,\r\n//         payload: {\r\n//          message\r\n//         }\r\n//       });\r\n//     } else {\r\n//       if (res.status === 400) {\r\n//         dispatch({\r\n//           type: userContants.USER_REGISTER_FAILURE,\r\n//           payload: { error: res.data.error }\r\n//         });\r\n//       }\r\n//     }\r\n//   };\r\n// };\r\n\r\n\r\n// export const signup = (user) => {\r\n//   return async (dispatch) => {\r\n//     let res;\r\n//     try {\r\n//       dispatch({ type: authConstants.SIGNUP_REQUEST });\r\n//       res = await axios.post(`/signup`, user);\r\n//       if (res.status === 201) {\r\n//         dispatch({ type: authConstants.SIGNUP_SUCCESS });\r\n//         const { token, user } = res.data;\r\n//         localStorage.setItem(\"token\", token);\r\n//         localStorage.setItem(\"user\", JSON.stringify(user));\r\n//         dispatch({\r\n//           type: authConstants.LOGIN_SUCCESS,\r\n//           payload: {\r\n//             token,\r\n//             user,\r\n//           },\r\n//         });\r\n//       } else {\r\n//         const { error } = res.data;\r\n//         dispatch({ type: authConstants.SIGNUP_FAILURE, payload: { error } });\r\n//       }\r\n//     } catch (error) {\r\n//       // const { data } = error.response;\r\n//       dispatch({\r\n//         type: authConstants.SIGNUP_FAILURE,\r\n//         payload: { error },\r\n//       });\r\n//     }\r\n//   };\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}